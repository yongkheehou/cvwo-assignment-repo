{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { setCredentials, logOut } from '../features/auth/authSlice';\nconst baseQuery = fetchBaseQuery({\n  baseUrl: 'http://localhost:3500',\n  credentials: 'include',\n  prepareHeaders: (headers, {\n    getState\n  }) => {\n    const state = getState();\n    const token = state.auth.token;\n    if (token) {\n      headers.set(\"authorization\", `Bearer ${token}`);\n    }\n    return headers;\n  }\n});\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\n  var _result;\n  let result = await baseQuery(args, api, extraOptions);\n  const state = api.getState();\n  if ((_result = result) !== null && _result !== void 0 && _result.error) {\n    const err = result.error;\n    if (\"originalStatus\" in err) {\n      if ((err === null || err === void 0 ? void 0 : err.originalStatus) === 403) {\n        console.log('sending refresh token');\n        // send refresh token to get new access token \n        const refreshResult = await baseQuery('/refresh', api, extraOptions);\n        console.log(refreshResult);\n        if (refreshResult !== null && refreshResult !== void 0 && refreshResult.data) {\n          const user = state.auth.user;\n          // store the new token \n          api.dispatch(setCredentials({\n            ...refreshResult.data,\n            user\n          }));\n          // retry the original query with new access token \n          result = await baseQuery(args, api, extraOptions);\n        } else {\n          api.dispatch(logOut(state));\n        }\n      }\n    }\n  }\n  return result;\n};\nexport const apiSlice = createApi({\n  baseQuery: baseQueryWithReauth,\n  endpoints: builder => ({})\n});","map":{"version":3,"names":["createApi","fetchBaseQuery","setCredentials","logOut","baseQuery","baseUrl","credentials","prepareHeaders","headers","getState","state","token","auth","set","baseQueryWithReauth","args","api","extraOptions","_result","result","error","err","originalStatus","console","log","refreshResult","data","user","dispatch","apiSlice","endpoints","builder"],"sources":["/Users/kheehouyong/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/side_projects/CVWO/cvwo/frontend/src/api/apiSlice.ts"],"sourcesContent":["import { BaseQueryApi, BaseQueryFn, FetchBaseQueryError, createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { setCredentials, logOut } from '../features/auth/authSlice'\nimport { RootState } from '../store'\n\nconst baseQuery: BaseQueryFn = fetchBaseQuery({\n    baseUrl: 'http://localhost:3500',\n    credentials: 'include',\n    prepareHeaders: (headers, { getState }) => {\n        const state = getState() as RootState\n        const token = state.auth.token\n        if (token) {\n            headers.set(\"authorization\", `Bearer ${token}`)\n        }\n        return headers\n    }\n})\n\nconst baseQueryWithReauth = async (args: any, api: BaseQueryApi, extraOptions: object) => {\n    let result = await baseQuery(args, api, extraOptions)\n    const state = api.getState() as RootState\n\n    if (result?.error) {\n      const err = result.error as FetchBaseQueryError\n      if (\"originalStatus\" in err) {\n        if (err?.originalStatus === 403) {\n          console.log('sending refresh token')\n          // send refresh token to get new access token \n          const refreshResult = await baseQuery('/refresh', api, extraOptions)\n          console.log(refreshResult)\n          if (refreshResult?.data) {\n            const user = state.auth.user\n            // store the new token \n            api.dispatch(setCredentials({ ...refreshResult.data, user }))\n            // retry the original query with new access token \n            result = await baseQuery(args, api, extraOptions)\n          } else {\n            api.dispatch(logOut(state))\n          }\n        }\n      }\n    }\n\n    return result\n}\n\nexport const apiSlice = createApi({\n    baseQuery: baseQueryWithReauth,\n    endpoints: builder => ({})\n})\n"],"mappings":"AAAA,SAAyDA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AACxH,SAASC,cAAc,EAAEC,MAAM,QAAQ,4BAA4B;AAGnE,MAAMC,SAAsB,GAAGH,cAAc,CAAC;EAC1CI,OAAO,EAAE,uBAAuB;EAChCC,WAAW,EAAE,SAAS;EACtBC,cAAc,EAAEA,CAACC,OAAO,EAAE;IAAEC;EAAS,CAAC,KAAK;IACvC,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAc;IACrC,MAAME,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACD,KAAK;IAC9B,IAAIA,KAAK,EAAE;MACPH,OAAO,CAACK,GAAG,CAAC,eAAe,EAAG,UAASF,KAAM,EAAC,CAAC;IACnD;IACA,OAAOH,OAAO;EAClB;AACJ,CAAC,CAAC;AAEF,MAAMM,mBAAmB,GAAG,MAAAA,CAAOC,IAAS,EAAEC,GAAiB,EAAEC,YAAoB,KAAK;EAAA,IAAAC,OAAA;EACtF,IAAIC,MAAM,GAAG,MAAMf,SAAS,CAACW,IAAI,EAAEC,GAAG,EAAEC,YAAY,CAAC;EACrD,MAAMP,KAAK,GAAGM,GAAG,CAACP,QAAQ,CAAC,CAAc;EAEzC,KAAAS,OAAA,GAAIC,MAAM,cAAAD,OAAA,eAANA,OAAA,CAAQE,KAAK,EAAE;IACjB,MAAMC,GAAG,GAAGF,MAAM,CAACC,KAA4B;IAC/C,IAAI,gBAAgB,IAAIC,GAAG,EAAE;MAC3B,IAAI,CAAAA,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,cAAc,MAAK,GAAG,EAAE;QAC/BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACpC;QACA,MAAMC,aAAa,GAAG,MAAMrB,SAAS,CAAC,UAAU,EAAEY,GAAG,EAAEC,YAAY,CAAC;QACpEM,OAAO,CAACC,GAAG,CAACC,aAAa,CAAC;QAC1B,IAAIA,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEC,IAAI,EAAE;UACvB,MAAMC,IAAI,GAAGjB,KAAK,CAACE,IAAI,CAACe,IAAI;UAC5B;UACAX,GAAG,CAACY,QAAQ,CAAC1B,cAAc,CAAC;YAAE,GAAGuB,aAAa,CAACC,IAAI;YAAEC;UAAK,CAAC,CAAC,CAAC;UAC7D;UACAR,MAAM,GAAG,MAAMf,SAAS,CAACW,IAAI,EAAEC,GAAG,EAAEC,YAAY,CAAC;QACnD,CAAC,MAAM;UACLD,GAAG,CAACY,QAAQ,CAACzB,MAAM,CAACO,KAAK,CAAC,CAAC;QAC7B;MACF;IACF;EACF;EAEA,OAAOS,MAAM;AACjB,CAAC;AAED,OAAO,MAAMU,QAAQ,GAAG7B,SAAS,CAAC;EAC9BI,SAAS,EAAEU,mBAAmB;EAC9BgB,SAAS,EAAEC,OAAO,KAAK,CAAC,CAAC;AAC7B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}